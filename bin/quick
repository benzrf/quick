#!/usr/bin/env ruby
require 'thor'
require 'brb'
require 'pathname'
require 'uri'
require_relative '../lib/quick'

class QuickCLI < Thor
	map '-v' => :version
	desc 'version', "print your version of Quick"
	def version
		puts Quick::VERSION
	end

	desc 'start MOUNT_DIR', "run Quick, mounting the FS on MOUNT_DIR"
	option :foreground, type: :boolean, aliases: :f
	def start(dir)
		if File.file? dir or
			(File.directory? dir and Dir.entries(dir).size > 2)
			puts "cannot mount on #{dir}"
			exit 1
		elsif not File.directory? dir
			existed = false
			Dir.mkdir dir
		else
			existed = true
		end
		unless options.foreground?
			if (pid = fork)
				Process.detach pid
				exit
			end
		end
		Quick.run dir
		Dir.rmdir dir unless existed
	end

	desc 'stop', "stop your current Quick instance"
	def stop
		Quick.stop
	end

	desc 'pry', "start a pry in an instance of the current module"
	option :module, type: :boolean, aliases: :m
	def pry
		uri = Quick.pry_here !options.module?
		system "pry-remote-em #{uri}"
	end

	desc 'module NAME', "create a new module here"
	def module(name)
		Quick.module_here name
	end

	map 'class' => :class_
	desc 'class NAME [SUPERCLASS_PATH]', "create a new class here"
	def class_(name, super_path='Object')
		Quick.class_here name, super_path
	end

	desc 'eval CODE', "evaluate some code in an instance of the current module"
	option :module, type: :boolean, aliases: :m
	def eval(code)
		result = Quick.eval_here code, !options.module?
		puts "=> #{result}"
	end
end

begin
	QuickCLI.start
rescue RuntimeError => e
	puts e.message
	exit 1
end

# vim:tabstop=2 shiftwidth=2 noexpandtab:

